import os
import json
import uuid
import csv
import shutil
import asyncio
import logging
from datetime import datetime, timezone

import aiosqlite
from aiohttp import web

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile
)
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties

# =============================
# CONFIG
# =============================
BOT_TOKEN = os.getenv("BOT_TOKEN") or "YOUR_BOT_TOKEN"
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456789"))

DB_PATH = os.getenv("DB_PATH", "store.db")

SITE_URL = os.getenv("SITE_URL", "https://t.me/your_channel")

# YooKassa
YK_SHOP_ID    = os.getenv("YK_SHOP_ID", "123456")
YK_SECRET_KEY = os.getenv("YK_SECRET_KEY", "your_secret_key")
YK_RETURN_URL = os.getenv("YK_RETURN_URL", "https://t.me/your_bot")
PORT          = int(os.getenv("PORT", "8080"))

BACKUP_DIR = os.getenv("BACKUP_DIR", "backups")
BACKUP_EVERY_HOURS = int(os.getenv("BACKUP_EVERY_HOURS", "24"))

# =============================
# LOGGING & BOT
# =============================
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü–∞–º—è—Ç—å –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º: payment_id -> {"user_id": int, "items": dict(pid->{name,qty,price})}
PAYMENTS: dict[str, dict] = {}

# –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–æ–≤: {admin_id: product_id}
PENDING_UPLOAD: dict[int, int] = {}

# =============================
# YooKassa
# =============================
try:
    from yookassa import Configuration, Payment
    Configuration.account_id = YK_SHOP_ID
    Configuration.secret_key = YK_SECRET_KEY
except Exception as e:
    Payment = None  # type: ignore
    logging.warning("–ú–æ–¥—É–ª—å yookassa –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–ø–ª–∞—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞: %s", e)

# =============================
# UI
# =============================
user_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÇ –ö–∞—Ç–∞–ª–æ–≥")],
        [KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")],
        [KeyboardButton(text="‚≠ê –û—Ç–∑—ã–≤—ã")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
    ],
    resize_keyboard=True
)

ADMIN_ONLY_HINT = "‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

DESCR = {
    "$2":  "–î–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ App Store, iTunes –∏ Apple Music. –ö–æ–¥ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.",
    "$5":  "–î–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –∏–≥—Ä, —Ñ–∏–ª—å–º–æ–≤ –∏ –º—É–∑—ã–∫–∏. –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∫–æ–¥–∞ –≤ Telegram.",
    "$10": "–î–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ iCloud, Apple Music, App Store. –ö–æ–¥ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ.",
    "$20": "–£–¥–æ–±–Ω–æ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø–æ–∫—É–ø–æ–∫ –≤ Apple Store. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ —Å—Ä–∞–∑—É.",
    "$25": "–î–ª—è –∏–≥—Ä, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, —Ñ–∏–ª—å–º–æ–≤ –∏ –º—É–∑—ã–∫–∏. –ö–æ–¥ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —á–∞—Ç.",
}

def product_card_text(name: str, price: int) -> str:
    return (
        f"üí≥ <b>Apple Gift Card {name} (–°–®–ê)</b>\n"
        f"üì± {DESCR.get(name, '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ Apple ID (–°–®–ê).')}\n"
        f"üí∞ –¶–µ–Ω–∞: <b>{price}‚ÇΩ</b>"
    )

# =============================
# DB
# =============================
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE,
            price_rub INTEGER
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS cart (
            user_id INTEGER,
            product_id INTEGER,
            qty INTEGER DEFAULT 1
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS codes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_id INTEGER,
            code TEXT UNIQUE,
            sold INTEGER DEFAULT 0,
            sold_at TEXT,
            buyer_id INTEGER
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            total_rub INTEGER,
            created_at TEXT DEFAULT (datetime('now')),
            details TEXT
        )""")
        # –ü—Ä–∞–π—Å
        defaults = [("$2", 300), ("$5", 600), ("$10", 1100), ("$20", 2000), ("$25", 2500)]
        for name, price in defaults:
            await db.execute("INSERT OR IGNORE INTO products (name, price_rub) VALUES (?, ?)", (name, price))
            await db.execute("UPDATE products SET price_rub = ? WHERE name = ?", (price, name))
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–¥—ã
        test_codes = {
            "$2":  ["TEST-APPLE-2-1A2B-3C4D"],
            "$5":  ["TEST-APPLE-5-5E6F-7A8B"],
            "$10": ["TEST-APPLE-10-9C0D-1E2F"],
            "$20": ["TEST-APPLE-20-3A4B-5C6D"],
            "$25": ["TEST-APPLE-25-7E8F-9A0B"],
        }
        for name, codes in test_codes.items():
            cur = await db.execute("SELECT id FROM products WHERE name = ?", (name,))
            row = await cur.fetchone()
            if row:
                pid = row[0]
                for code in codes:
                    await db.execute("INSERT OR IGNORE INTO codes (product_id, code) VALUES (?, ?)", (pid, code))
        await db.commit()


async def build_catalog_kb() -> InlineKeyboardMarkup:
    rows = []
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT id, name FROM products ORDER BY id")
        prods = await cur.fetchall()
    for pid, name in prods:
        rows.append([InlineKeyboardButton(text=name, callback_data=f"buy:{pid}")])
    return InlineKeyboardMarkup(inline_keyboard=rows or [[InlineKeyboardButton(text="–ü—É—Å—Ç–æ", callback_data="none")]])

# =============================
# Backups & export
# =============================
def _ts() -> str:
    return datetime.now(timezone.utc).strftime("%Y%m%d-%H%M%S")


def make_backup(db_path: str) -> str:
    os.makedirs(BACKUP_DIR, exist_ok=True)
    dst = os.path.join(BACKUP_DIR, f"db-{_ts()}.sqlite3")
    shutil.copyfile(db_path, dst)
    return dst


async def export_codes_csv(db_path: str) -> str:
    os.makedirs(BACKUP_DIR, exist_ok=True)
    csv_path = os.path.join(BACKUP_DIR, f"codes-{_ts()}.csv")
    async with aiosqlite.connect(db_path) as db:
        db.row_factory = aiosqlite.Row
        cur = await db.execute("SELECT id, product_id, code, sold, sold_at, buyer_id FROM codes ORDER BY id")
        rows = await cur.fetchall()
    with open(csv_path, "w", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        w.writerow(["id", "product_id", "code", "sold", "sold_at", "buyer_id"])
        for r in rows:
            w.writerow([r["id"], r["product_id"], r["code"], r["sold"], r["sold_at"], r["buyer_id"]])
    return csv_path


async def auto_backup_loop():
    if BACKUP_EVERY_HOURS <= 0:
        return
    while True:
        try:
            path = make_backup(DB_PATH)
            if ADMIN_ID:
                await bot.send_document(ADMIN_ID, FSInputFile(path), caption="–ê–≤—Ç–æ–±—ç–∫–∞–ø –ë–î ‚úÖ")
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—ç–∫–∞–ø–∞: %s", e)
            if ADMIN_ID:
                await bot.send_message(ADMIN_ID, f"[backup] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—ç–∫–∞–ø–∞: {e}")
        await asyncio.sleep(BACKUP_EVERY_HOURS * 3600)

  # =============================
# Helpers
# =============================
def is_admin(uid: int) -> bool:
    return uid == ADMIN_ID


def pay_kb(url: str, payment_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooKassa", url=url)],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid:{payment_id}")]
    ])


async def deliver_items_and_record(uid: int, items: dict[str, dict]) -> str:
    """–ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –ø–æ–∑–∏—Ü–∏—è–º, —Å–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–¥—ã, —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–¥–∞–º–∏."""
    total = 0
    lines = []
    async with aiosqlite.connect(DB_PATH) as db:
        for pid_str, meta in items.items():
            pid = int(pid_str)
            name = meta["name"]
            qty  = int(meta["qty"])
            price = int(meta["price"])
            total += price * qty

            # –∑–∞–±–∏—Ä–∞–µ–º –∫–æ–¥—ã
            cur = await db.execute(
                "SELECT id, code FROM codes WHERE product_id = ? AND sold = 0 ORDER BY id LIMIT ?",
                (pid, qty)
            )
            codes_to_sell = await cur.fetchall()
            if len(codes_to_sell) < qty:
                # –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–¥–æ–≤
                await bot.send_message(
                    ADMIN_ID,
                    f"‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–¥–æ–≤ –¥–ª—è {name}. –ù—É–∂–Ω–æ {qty}, –µ—Å—Ç—å {len(codes_to_sell)}. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {uid}"
                )
            code_texts = []
            for cid, code in codes_to_sell:
                code_texts.append(code)
                await db.execute(
                    "UPDATE codes SET sold = 1, sold_at = ?, buyer_id = ? WHERE id = ?",
                    (datetime.utcnow().isoformat(), uid, cid)
                )
            lines.append(f"{name} x{qty}: " + (", ".join(f"<code>{c}</code>" for c in code_texts) if code_texts else "<i>–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</i>"))

        details = "\n".join(lines)
        await db.execute("INSERT INTO orders (user_id, total_rub, details) VALUES (?, ?, ?)", (uid, total, details))
        await db.execute("DELETE FROM cart WHERE user_id = ?", (uid,))
        await db.commit()

    text = "üéâ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!</b>\n–í–∞—à–∏ –∫–æ–¥—ã:\n" + details + f"\n\nüí∞ –ò—Ç–æ–≥–æ: <b>{total}‚ÇΩ</b>"
    return text

# =============================
# User commands
# =============================
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–∞–≥–∞–∑–∏–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö <b>Apple Gift Card (–°–®–ê)</b>.\n"
        "–û—Ç–∫—Ä–æ–π <b>–ö–∞—Ç–∞–ª–æ–≥</b>, –¥–æ–±–∞–≤—å –Ω–æ–º–∏–Ω–∞–ª –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–∏ –∑–∞–∫–∞–∑.\n\n"
        "–û–ø–ª–∞—Ç–∞ ‚Äî —á–µ—Ä–µ–∑ –ÆKassa.",
        reply_markup=user_menu
    )


@dp.message(F.text == "‚≠ê –û—Ç–∑—ã–≤—ã")
@dp.message(Command("reviews"))
async def reviews_cmd(message: types.Message):
    await message.answer(f"‚≠ê –û—Ç–∑—ã–≤—ã –∏ —Å–≤—è–∑—å: {SITE_URL}")


@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ üìÇ –ö–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª ($2, $5, $10, $20, $25)\n"
        "‚Ä¢ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ üõí –ö–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø—Ä—è–º–æ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ ¬´–ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å¬ª\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∫–æ–¥—ã –ø—Ä–∏–¥—É—Ç —Å—é–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
        f"üåç –û—Ç–∑—ã–≤—ã: {SITE_URL}"
    )


@dp.message(F.text == "üìÇ –ö–∞—Ç–∞–ª–æ–≥")
@dp.message(Command("catalog"))
async def catalog_cmd(message: types.Message):
    kb = await build_catalog_kb()
    await message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª –∫–∞—Ä—Ç—ã:", reply_markup=kb)


@dp.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
@dp.message(Command("cart"))
async def cart_cmd(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT p.id, p.name, p.price_rub, c.qty
            FROM cart c
            JOIN products p ON p.id = c.product_id
            WHERE c.user_id = ?
        """, (user_id,))
        items = await cur.fetchall()
    if not items:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    total = sum(price * qty for _, _, price, qty in items)
    text = "üß∫ <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n"
    for pid, name, price, qty in items:
        text += f"- {name} x{qty} ‚Äî {price}‚ÇΩ √ó {qty} = <b>{price*qty}‚ÇΩ</b>\n"
    text += f"\nüí∞ –ò—Ç–æ–≥–æ: <b>{total}‚ÇΩ</b>"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="back_to_catalog")],
            [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
            [InlineKeyboardButton(text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")]
        ]
    )
    await message.answer(text, reply_markup=kb)

# =============================
# Callbacks
# =============================
@dp.callback_query()
async def callbacks(cb: types.CallbackQuery):
    data = cb.data

    if data == "none":
        await cb.answer()
        return

    if data == "back_to_catalog":
        kb = await build_catalog_kb()
        await cb.message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª –∫–∞—Ä—Ç—ã:", reply_markup=kb)
        await cb.answer()
        return

    # –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞
    if data.startswith("buy:"):
        pid = int(data.split(":")[1])
        async with aiosqlite.connect(DB_PATH) as db:
            cur = await db.execute("SELECT name, price_rub FROM products WHERE id = ?", (pid,))
            row = await cur.fetchone()
        if not row:
            await cb.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await cb.answer()
            return
        name, price = row
        text = product_card_text(name, price)
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add:{pid}")],
            [InlineKeyboardButton(text="‚ö° –ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"buy_now:{pid}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="back_to_catalog")],
        ])
        await cb.message.answer(text, reply_markup=kb)
        await cb.answer()
        return

    # –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
    if data.startswith("add:"):
        pid = int(data.split(":")[1])
        uid = cb.from_user.id
        async with aiosqlite.connect(DB_PATH) as db:
            cur = await db.execute("SELECT name, price_rub FROM products WHERE id = ?", (pid,))
            row = await cur.fetchone()
            if not row:
                await cb.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await cb.answer()
                return
            name, price = row
            cur = await db.execute("SELECT qty FROM cart WHERE user_id = ? AND product_id = ?", (uid, pid))
            exist = await cur.fetchone()
            if exist:
                await db.execute("UPDATE cart SET qty = qty + 1 WHERE user_id = ? AND product_id = ?", (uid, pid))
            else:
                await db.execute("INSERT INTO cart (user_id, product_id, qty) VALUES (?, ?, 1)", (uid, pid))
            await db.commit()
        await cb.message.answer(f"‚úÖ {name} ‚Äî {price}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω(–∞) –≤ üõí –ö–æ—Ä–∑–∏–Ω—É.")
        await cb.answer()
        return

    # –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    if data == "clear_cart":
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("DELETE FROM cart WHERE user_id = ?", (cb.from_user.id,))
            await db.commit()
        await cb.message.answer("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
        await cb.answer()
        return

    # –∫—É–ø–∏—Ç—å —Å—Ä–∞–∑—É –∏–ª–∏ checkout
    if data.startswith("buy_now:") or data == "checkout":
        uid = cb.from_user.id
        items_dict: dict[str, dict] = {}
        total = 0

        async with aiosqlite.connect(DB_PATH) as db:
            if data.startswith("buy_now:"):
                pid = int(data.split(":")[1])
                cur = await db.execute("SELECT id, name, price_rub FROM products WHERE id = ?", (pid,))
                r = await cur.fetchone()
                if not r:
                    await cb.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    await cb.answer()
                    return
                pid, name, price = r
                items_dict[str(pid)] = {"name": name, "qty": 1, "price": int(price)}
                total = int(price)
            else:
                cur = await db.execute("""
                    SELECT p.id, p.name, p.price_rub, c.qty
                    FROM cart c
                    JOIN products p ON p.id = c.product_id
                    WHERE c.user_id = ?
                """, (uid,))
                rows = await cur.fetchall()
                if not rows:
                    await cb.message.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
                    await cb.answer()
                    return
                for pid, name, price, qty in rows:
                    items_dict[str(pid)] = {"name": name, "qty": int(qty), "price": int(price)}
                    total += int(price) * int(qty)

        if Payment is None:
            await cb.message.answer("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            await cb.answer()
            return

        order_id = uuid.uuid4().hex[:8].upper()
        meta = {
            "tg_user_id": str(uid),
            "order_id": order_id,
            "items_json": json.dumps(items_dict, ensure_ascii=False)
        }
        try:
            payment = Payment.create({
                "amount": {"value": f"{total:.2f}", "currency": "RUB"},
                "capture": True,
                "confirmation": {"type": "redirect", "return_url": YK_RETURN_URL},
                "description": f"Apple Gift Cards ‚Äî Order {order_id} (Telegram {uid})",
                "metadata": meta
            })
        except Exception as e:
            logging.exception("YooKassa create() error: %s", e)
            await cb.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂ –≤ –ÆKassa. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏ –º–∞–≥–∞–∑–∏–Ω–∞.")
            await cb.answer()
            return

        confirm_url = payment.confirmation.confirmation_url
        PAYMENTS[payment.id] = {"user_id": uid, "items": items_dict}

        await cb.message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ <b>#{order_id}</b>\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total}‚ÇΩ</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆKassa¬ª. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–¥—ã.",
            reply_markup=pay_kb(confirm_url, payment.id)
        )
        await cb.answer()
        return

      # —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã (fallback, –µ—Å–ª–∏ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞)
    if data.startswith("paid:"):
        pid = data.split(":")[1]
        if Payment is None:
            await cb.answer("–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞", show_alert=True)
            return
        try:
            p = Payment.find_one(pid)
            if getattr(p, "status", "") == "succeeded":
                info = PAYMENTS.get(pid)
                if not info:
                    try:
                        md = p.metadata or {}
                        items = json.loads(md.get("items_json", "{}")) if md else {}
                        uid = int(md.get("tg_user_id", cb.from_user.id))
                        info = {"user_id": uid, "items": items}
                    except Exception:
                        info = None
                if info:
                    text = await deliver_items_and_record(info["user_id"], info["items"])
                    await bot.send_message(info["user_id"], text)
                    try:
                        await bot.send_message(ADMIN_ID, f"üì¶ –û–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –æ—Ç {info['user_id']}\n{datetime.utcnow().isoformat()}")
                    except Exception:
                        pass
                    PAYMENTS.pop(pid, None)
                    await cb.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –∫–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", show_alert=True)
                else:
                    await cb.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)
            else:
                await cb.answer("–ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω.", show_alert=True)
        except Exception as e:
            logging.exception("paid-check error: %s", e)
            await cb.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

# =============================
# Webhook YooKassa
# =============================
async def yk_webhook(request: web.Request):
    try:
        body = await request.json()
    except Exception:
        return web.Response(text="bad json", status=400)

    event = body.get("event")
    if event == "payment.succeeded":
        obj = body.get("object", {}) or {}
        payment_id = obj.get("id")
        md = obj.get("metadata", {}) or {}
        try:
            uid = int(md.get("tg_user_id") or 0)
        except Exception:
            uid = 0
        items_json = md.get("items_json") or ""
        items = {}
        try:
            items = json.loads(items_json) if items_json else (PAYMENTS.get(payment_id) or {}).get("items") or {}
        except Exception:
            items = (PAYMENTS.get(payment_id) or {}).get("items") or {}

        if uid and items:
            text = await deliver_items_and_record(uid, items)
            await bot.send_message(uid, text)
            try:
                await bot.send_message(ADMIN_ID, f"üì¶ –û–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –æ—Ç {uid}\npayment_id: {payment_id}")
            except Exception:
                pass
            PAYMENTS.pop(payment_id, None)

    return web.Response(text="ok")


async def start_web_app():
    app = web.Application()
    app.router.add_post("/yookassa/webhook", yk_webhook)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    await site.start()
    logging.info(f"Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :{PORT}/yookassa/webhook")

# =============================
# Admin
# =============================
@dp.message(Command("admin"))
async def admin_menu(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer(ADMIN_ONLY_HINT)
        return
    await message.answer(
        "üîë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–¢–æ–≤–∞—Ä—ã:\n"
        "‚Ä¢ /addproduct $–Ω–æ–º–∏–Ω–∞–ª —Ü–µ–Ω–∞\n"
        "‚Ä¢ /setprice $–Ω–æ–º–∏–Ω–∞–ª —Ü–µ–Ω–∞\n"
        "‚Ä¢ /delproduct $–Ω–æ–º–∏–Ω–∞–ª\n"
        "‚Ä¢ /listproducts ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–æ–º–∏–Ω–∞–ª–æ–≤ –∏ —Ü–µ–Ω\n\n"
        "–ö–æ–¥—ã:\n"
        "‚Ä¢ /uploadcodes $–Ω–æ–º–∏–Ω–∞–ª ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–¥—ã —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ .txt\n"
        "‚Ä¢ /stock ‚Äî –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –≤—Å–µ–º | /stock $–Ω–æ–º–∏–Ω–∞–ª ‚Äî –ø–æ –æ–¥–Ω–æ–º—É\n"
        "‚Ä¢ /export_codes ‚Äî —ç–∫—Å–ø–æ—Ä—Ç codes –≤ CSV\n\n"
        "–ë—ç–∫–∞–ø—ã:\n"
        "‚Ä¢ /backup_now ‚Äî –ø—Ä–∏—Å–ª–∞—Ç—å –±—ç–∫–∞–ø –ë–î\n\n"
        "–ü—Ä–æ—á–µ–µ:\n"
        "‚Ä¢ /orders ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã\n"
        "‚Ä¢ /users ‚Äî –∫–æ–ª-–≤–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    )


@dp.message(Command("addproduct"))
async def addproduct(message: types.Message):
    if not is_admin(message.from_user.id): return
    parts = message.text.split(maxsplit=2)
    if len(parts) != 3:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /addproduct $–Ω–æ–º–∏–Ω–∞–ª —Ü–µ–Ω–∞")
        return
    name, price = parts[1], parts[2]
    try:
        price = int(price)
    except:
        await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º."); return
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT OR IGNORE INTO products (name, price_rub) VALUES (?, ?)", (name, price))
        await db.commit()
    await message.answer(f"‚úÖ –ù–æ–º–∏–Ω–∞–ª {name} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ü–µ–Ω–æ–π {price}‚ÇΩ")


@dp.message(Command("setprice"))
async def setprice(message: types.Message):
    if not is_admin(message.from_user.id): return
    parts = message.text.split(maxsplit=2)
    if len(parts) != 3:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /setprice $–Ω–æ–º–∏–Ω–∞–ª —Ü–µ–Ω–∞")
        return
    name, price = parts[1], parts[2]
    try:
        price = int(price)
    except:
        await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º."); return
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE products SET price_rub = ? WHERE name = ?", (price, name))
        await db.commit()
    await message.answer(f"‚úÖ –¶–µ–Ω–∞ –¥–ª—è {name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}‚ÇΩ")


@dp.message(Command("delproduct"))
async def delproduct(message: types.Message):
    if not is_admin(message.from_user.id): return
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /delproduct $–Ω–æ–º–∏–Ω–∞–ª"); return
    name = parts[1]
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM products WHERE name = ?", (name,))
        await db.commit()
    await message.answer(f"üóëÔ∏è –ù–æ–º–∏–Ω–∞–ª {name} —É–¥–∞–ª—ë–Ω")


@dp.message(Command("listproducts"))
async def listproducts(message: types.Message):
    if not is_admin(message.from_user.id): return
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT name, price_rub FROM products ORDER BY id")
        rows = await cur.fetchall()
    if not rows:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–º–∏–Ω–∞–ª–æ–≤."); return
    text = "üìú –ù–æ–º–∏–Ω–∞–ª—ã –∏ —Ü–µ–Ω—ã:\n" + "\n".join(f"‚Ä¢ {n} ‚Äî {p}‚ÇΩ" for n, p in rows)
    await message.answer(text)


@dp.message(Command("uploadcodes"))
async def uploadcodes(message: types.Message):
    if not is_admin(message.from_user.id): return
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /uploadcodes $–Ω–æ–º–∏–Ω–∞–ª\n–ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç (–ø–æ –æ–¥–Ω–æ–º—É –∫–æ–¥—É –≤ —Å—Ç—Ä–æ–∫–µ) –∏–ª–∏ .txt —Ñ–∞–π–ª.")
        return
    name = parts[1]
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT id FROM products WHERE name = ?", (name,))
        row = await cur.fetchone()
    if not row:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /addproduct."); return
    PENDING_UPLOAD[message.from_user.id] = row[0]
    await message.answer(f"üì• –ñ–¥—É –∫–æ–¥—ã –¥–ª—è {name}. –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç (–ø–æ –æ–¥–Ω–æ–º—É –∫–æ–¥—É –≤ —Å—Ç—Ä–æ–∫–µ) –∏–ª–∏ .txt —Ñ–∞–π–ª.")

@dp.message(F.document)
async def handle_doc(msg: types.Message):
    if not is_admin(msg.from_user.id): return
    if msg.from_user.id not in PENDING_UPLOAD: return
    pid = PENDING_UPLOAD[msg.from_user.id]
    file = await bot.get_file(msg.document.file_id)
    src = await bot.download_file(file.file_path)
    content = src.read().decode("utf-8", errors="ignore")
    count = await save_codes(pid, content)
    del PENDING_UPLOAD[msg.from_user.id]
    await msg.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–¥–æ–≤: {count}")


@dp.message()
async def handle_text_after_upload(msg: types.Message):
    if is_admin(msg.from_user.id) and msg.from_user.id in PENDING_UPLOAD and msg.text and not msg.text.startswith("/"):
        pid = PENDING_UPLOAD[msg.from_user.id]
        count = await save_codes(pid, msg.text)
        del PENDING_UPLOAD[msg.from_user.id]
        await msg.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–¥–æ–≤: {count}")
        return
    # –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º


async def save_codes(product_id: int, raw: str) -> int:
    lines = [l.strip() for l in raw.splitlines()]
    codes = [l for l in lines if l]
    saved = 0
    async with aiosqlite.connect(DB_PATH) as db:
        for code in codes:
            try:
                await db.execute("INSERT OR IGNORE INTO codes (product_id, code) VALUES (?, ?)", (product_id, code))
                saved += 1
            except Exception:
                pass
        await db.commit()
    return saved


@dp.message(Command("stock"))
async def stock_cmd(message: types.Message):
    if not is_admin(message.from_user.id): return
    parts = message.text.split()
    async with aiosqlite.connect(DB_PATH) as db:
        if len(parts) == 2:
            name = parts[1]
            cur = await db.execute("SELECT id FROM products WHERE name = ?", (name,))
            r = await cur.fetchone()
            if not r: await message.answer("‚ùå –ù–æ–º–∏–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."); return
            pid = r[0]
            cur = await db.execute("SELECT COUNT(*) FROM codes WHERE product_id = ? AND sold = 0", (pid,))
            free = (await cur.fetchone())[0]
            await message.answer(f"üì¶ –û—Å—Ç–∞—Ç–æ–∫ {name}: {free} —à—Ç")
        else:
            cur = await db.execute("""
                SELECT p.name, COUNT(c.id) as free_cnt
                FROM products p
                LEFT JOIN codes c ON c.product_id = p.id AND c.sold = 0
                GROUP BY p.id ORDER BY p.id
            """)
            rows = await cur.fetchall()
            if not rows:
                await message.answer("–ù–æ–º–∏–Ω–∞–ª–æ–≤ –Ω–µ—Ç."); return
            text = "üì¶ –û—Å—Ç–∞—Ç–∫–∏ –ø–æ –Ω–æ–º–∏–Ω–∞–ª–∞–º:\n" + "\n".join(f"‚Ä¢ {n}: {cnt} —à—Ç" for n, cnt in rows)
            await message.answer(text)


@dp.message(Command("orders"))
async def orders_cmd(message: types.Message):
    if not is_admin(message.from_user.id): return
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT id, user_id, total_rub, created_at FROM orders ORDER BY id DESC LIMIT 10")
        rows = await cur.fetchall()
    if not rows:
        await message.answer("‚ùå –ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç."); return
    text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n" + "\n".join(
        f"#{oid} ‚Äî user {uid} ‚Äî {total}‚ÇΩ ‚Äî {ts}" for oid, uid, total, ts in rows
    )
    await message.answer(text)


@dp.message(Command("users"))
async def users_cmd(message: types.Message):
    if not is_admin(message.from_user.id): return
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT COUNT(DISTINCT user_id) FROM orders")
        cnt = (await cur.fetchone())[0]
    await message.answer(f"üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (—Å –∑–∞–∫–∞–∑–∞–º–∏): {cnt}")


@dp.message(Command("stats"))
async def stats_cmd(message: types.Message):
    if not is_admin(message.from_user.id): return
    async with aiosqlite.connect(DB_PATH) as db:
        cur1 = await db.execute("SELECT COUNT(*) FROM orders")
        orders_cnt = (await cur1.fetchone())[0]
        cur2 = await db.execute("SELECT COALESCE(SUM(total_rub),0) FROM orders")
        revenue = (await cur2.fetchone())[0]
    await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüì¶ –ó–∞–∫–∞–∑–æ–≤: {orders_cnt}\nüí∞ –í—ã—Ä—É—á–∫–∞: {revenue}‚ÇΩ")


@dp.message(Command("backup_now"))
async def backup_now_cmd(message: types.Message):
    if not is_admin(message.from_user.id): return
    try:
        path = make_backup(DB_PATH)
        await message.answer_document(FSInputFile(path), caption="–ë—ç–∫–∞–ø –≥–æ—Ç–æ–≤ ‚úÖ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞: {e}")


@dp.message(Command("export_codes"))
async def export_codes_cmd(message: types.Message):
    if not is_admin(message.from_user.id): return
    try:
        path = await export_codes_csv(DB_PATH)
        await message.answer_document(FSInputFile(path), caption="–≠–∫—Å–ø–æ—Ä—Ç codes.csv ‚úÖ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

  # =============================
# MAIN
# =============================
async def main():
    await init_db()
    # –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ
    await bot.set_my_commands([
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å–∫"),
        types.BotCommand(command="catalog", description="–ö–∞—Ç–∞–ª–æ–≥"),
        types.BotCommand(command="cart", description="–ö–æ—Ä–∑–∏–Ω–∞"),
        types.BotCommand(command="reviews", description="–û—Ç–∑—ã–≤—ã"),
        types.BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
    ])
    asyncio.create_task(start_web_app())
    asyncio.create_task(auto_backup_loop())
    logging.info("Bot is up. Polling...")
    await dp.start_polling(bot, drop_pending_updates=True)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped")
