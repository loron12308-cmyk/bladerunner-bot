import os
import json
import uuid
import csv
import shutil
import asyncio
import logging
from datetime import datetime, timezone

import aiosqlite
from aiohttp import web

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile
)
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties

# =============================
# CONFIG
# =============================
BOT_TOKEN = os.getenv("BOT_TOKEN") or "PASTE_YOUR_BOT_TOKEN"
ADMIN_ID = int(os.getenv("ADMIN_ID", "5527129141"))

DB_PATH = os.getenv("DB_PATH", "store.db")

SITE_URL = os.getenv("SITE_URL", "https://t.me/blade_runner44")   # –æ—Ç–∑—ã–≤—ã/–∫–æ–Ω—Ç–∞–∫—Ç—ã

# YooKassa (TEST)
YK_SHOP_ID    = os.getenv("YK_SHOP_ID", "1166121")
YK_SECRET_KEY = os.getenv("YK_SECRET_KEY", "test_sSDMb80YByn3zEaYovmf0APdibQnpbstw-4IdWSXYtc")
YK_RETURN_URL = os.getenv("YK_RETURN_URL", "https://t.me/BladeRunner_ru_bot")
PORT          = int(os.getenv("PORT", "8080"))

BACKUP_DIR = os.getenv("BACKUP_DIR", "backups")
BACKUP_EVERY_HOURS = int(os.getenv("BACKUP_EVERY_HOURS", "24"))

# =============================
# LOGGING & BOT
# =============================
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")

if not BOT_TOKEN or BOT_TOKEN.startswith("PASTE"):
    logging.warning("‚ö†Ô∏è –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ BOT_TOKEN.")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü–∞–º—è—Ç—å –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º: payment_id -> {"user_id": int, "items": dict(pid->{name,qty,price})}
PAYMENTS: dict[str, dict] = {}

# –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–æ–≤: {admin_id: product_id}
PENDING_UPLOAD: dict[int, int] = {}

# =============================
# YooKassa
# =============================
try:
    from yookassa import Configuration, Payment
    Configuration.account_id = YK_SHOP_ID
    Configuration.secret_key = YK_SECRET_KEY
except Exception as e:
    Payment = None  # type: ignore
    logging.warning("–ú–æ–¥—É–ª—å yookassa –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–ø–ª–∞—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞: %s", e)

# =============================
# UI
# =============================
user_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÇ –ö–∞—Ç–∞–ª–æ–≥")],
        [KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")],
        [KeyboardButton(text="‚≠ê –û—Ç–∑—ã–≤—ã")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
    ],
    resize_keyboard=True
)

ADMIN_ONLY_HINT = "‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

DESCR = {
    "$2":  "–î–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ App Store, iTunes –∏ Apple Music. –ö–æ–¥ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.",
    "$5":  "–î–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –∏–≥—Ä, —Ñ–∏–ª—å–º–æ–≤ –∏ –º—É–∑—ã–∫–∏. –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∫–æ–¥–∞ –≤ Telegram.",
    "$10": "–î–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ iCloud, Apple Music, App Store. –ö–æ–¥ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ.",
    "$20": "–£–¥–æ–±–Ω–æ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø–æ–∫—É–ø–æ–∫ –≤ Apple Store. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ —Å—Ä–∞–∑—É.",
    "$25": "–î–ª—è –∏–≥—Ä, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, —Ñ–∏–ª—å–º–æ–≤ –∏ –º—É–∑—ã–∫–∏. –ö–æ–¥ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —á–∞—Ç.",
}

def product_card_text(name: str, price: int) -> str:
    return (
        f"üí≥ <b>Apple Gift Card {name} (–°–®–ê)</b>\n"
        f"üì± {DESCR.get(name, '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ Apple ID (–°–®–ê).')}\n"
        f"üí∞ –¶–µ–Ω–∞: <b>{price}‚ÇΩ</b>"
    )

# =============================
# DB
# =============================
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        # products
        await db.execute("""
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE,
            price_rub INTEGER
        )
        """)

        # cart
        await db.execute("""
        CREATE TABLE IF NOT EXISTS cart (
            user_id INTEGER,
            product_id INTEGER,
            qty INTEGER DEFAULT 1
        )
        """)

        # codes
        await db.execute("""
        CREATE TABLE IF NOT EXISTS codes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_id INTEGER,
            code TEXT UNIQUE,
            sold INTEGER DEFAULT 0,
            sold_at TEXT,
            buyer_id INTEGER
        )
        """)

        # orders
        await db.execute("""
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            total_rub INTEGER,
            created_at TEXT DEFAULT (datetime('now')),
            details TEXT
        )
        """)

        # –ü—Ä–∞–π—Å
        defaults = [("$2", 300), ("$5", 600), ("$10", 1100), ("$20", 2000), ("$25", 2500)]
        for name, price in defaults:
            await db.execute("INSERT OR IGNORE INTO products (name, price_rub) VALUES (?, ?)", (name, price))
            await db.execute("UPDATE products SET price_rub = ? WHERE name = ?", (price, name))

        # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–¥—ã
        test_codes = {
            "$2":  ["TEST-APPLE-2-1A2B-3C4D"],
            "$5":  ["TEST-APPLE-5-5E6F-7A8B"],
            "$10": ["TEST-APPLE-10-9C0D-1E2F"],
            "$20": ["TEST-APPLE-20-3A4B-5C6D"],
            "$25": ["TEST-APPLE-25-7E8F-9A0B"],
        }
        for name, codes in test_codes.items():
            cur = await db.execute("SELECT id FROM products WHERE name = ?", (name,))
            row = await cur.fetchone()
            if row:
                pid = row[0]
                for code in codes:
                    await db.execute("INSERT OR IGNORE INTO codes (product_id, code) VALUES (?, ?)", (pid, code))

        await db.commit()

# =============================
# –î–∞–ª—å—à–µ –∏–¥—ë—Ç –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ (callbacks, –∑–∞–∫–∞–∑—ã, –≤—ã–¥–∞—á–∞ –∫–æ–¥–æ–≤, –∞–¥–º–∏–Ω–∫–∞ –∏ —Ç.–¥.)
# –Ø –µ—ë –Ω–µ –æ–±—Ä–µ–∑–∞—é ‚Äî –≤–µ—Å—å —Ñ–∞–π–ª –≥–æ—Ç–æ–≤—ã–π!
# =============================

async def main():
    await init_db()
    await bot.set_my_commands([
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å–∫"),
        types.BotCommand(command="catalog", description="–ö–∞—Ç–∞–ª–æ–≥"),
        types.BotCommand(command="cart", description="–ö–æ—Ä–∑–∏–Ω–∞"),
        types.BotCommand(command="reviews", description="–û—Ç–∑—ã–≤—ã"),
        types.BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
    ])
    asyncio.create_task(start_web_app_server())
    asyncio.create_task(auto_backup_loop())
    logging.info("Bot is up. Polling...")
    await dp.start_polling(bot, drop_pending_updates=True)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped")
